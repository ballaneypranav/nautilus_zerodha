TITLE: Defining Custom Portfolio Statistic: WinRate (Python)
DESCRIPTION: This snippet demonstrates how to define a custom portfolio statistic by inheriting from `PortfolioStatistic`. It implements the `calculate_from_realized_pnls` method to compute the win rate based on a series of realized PnLs, handling cases with no data by returning a default value. This allows users to extend the built-in analysis capabilities of NautilusTrader.
SOURCE: docs/concepts/portfolio.md
LANGUAGE: Python
KEYWORDS: PortfolioStatistic,customization,library:pandas,portfolio,realized PnL,reporting & analysis,statistic:win-rate
CODE:
```
import pandas as pd
from typing import Any
from nautilus_trader.analysis.statistic import PortfolioStatistic


class WinRate(PortfolioStatistic):
    """
    Calculates the win rate from a realized PnLs series.
    """

    def calculate_from_realized_pnls(self, realized_pnls: pd.Series) -> Any | None:
        # Preconditions
        if realized_pnls is None or realized_pnls.empty:
            return 0.0

        # Calculate statistic
        winners = [x for x in realized_pnls if x > 0.0]
        losers = [x for x in realized_pnls if x <= 0.0]

        return len(winners) / float(max(1, (len(winners) + len(losers))))
```
----------------------------------------
TITLE: Registering Custom Portfolio Statistic with Analyzer (Python)
DESCRIPTION: This snippet shows how to register a custom portfolio statistic, such as the previously defined `WinRate`, with the `PortfolioAnalyzer`. After instantiating the custom statistic, it is passed to the `register_statistic` method of the `engine.portfolio.analyzer` object, making it available for performance analysis during backtests or live trading.
SOURCE: docs/concepts/portfolio.md
LANGUAGE: Python
KEYWORDS: PortfolioAnalyzer,WinRate,customization,portfolio,register,reporting & analysis
CODE:
```
stat = WinRate()

# Register with the portfolio analyzer
engine.portfolio.analyzer.register_statistic(stat)
```