TITLE: Creating Market Order using OrderFactory (Python)
DESCRIPTION: This snippet shows how to instantiate a `MarketOrder` object using the `order_factory` provided within a `Strategy` context in Nautilus Trader. It specifies the instrument, side, quantity, and optional parameters like time in force and reduce only flag.
SOURCE: docs/concepts/orders.md
LANGUAGE: Python
KEYWORDS: OrderFactory,OrderSide,TimeInForce,instrument,order management,order type:market,order:create,strategy
CODE:
```
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import MarketOrder

order: MarketOrder = self.order_factory.market(
    instrument_id=InstrumentId.from_str("AUD/USD.IDEALPRO"),
    order_side=OrderSide.BUY,
    quantity=Quantity.from_int(100_000),
    time_in_force=TimeInForce.IOC,  # <-- optional (default GTC)
    reduce_only=False,  # <-- optional (default False)
    tags=["ENTRY"],  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Creating a Limit Order in Nautilus Trader (Python)
DESCRIPTION: Demonstrates how to create a Limit order using the `order_factory.limit` method. It shows setting the instrument, side, quantity, price, and optional parameters like `time_in_force`, `post_only`, etc., for a SELL order on Binance Futures.
SOURCE: docs/concepts/orders.md
LANGUAGE: python
KEYWORDS: Binance,OrderFactory,OrderSide,feature:post-only,futures,instrument,integration,order management,order type:limit,order:create,strategy
CODE:
```
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Price
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import LimitOrder

order: LimitOrder = self.order_factory.limit(
    instrument_id=InstrumentId.from_str("ETHUSDT-PERP.BINANCE"),
    order_side=OrderSide.SELL,
    quantity=Quantity.from_int(20),
    price=Price.from_str("5_000.00"),
    time_in_force=TimeInForce.GTC,  # <-- optional (default GTC)
    expire_time=None,  # <-- optional (default None)
    post_only=True,  # <-- optional (default False)
    reduce_only=False,  # <-- optional (default False)
    display_qty=None,  # <-- optional (default None which indicates full display)
    tags=None,  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Create Trailing-Stop-Limit Order in Nautilus Trader (Python)
DESCRIPTION: Shows how to create a TrailingStopLimitOrder instance via the order_factory. It includes parameters for instrument ID, side, quantity, limit price, activation price, trigger type, limit offset, trailing offset, and time in force for a BUY order on Currenex.
SOURCE: docs/concepts/orders.md
LANGUAGE: python
KEYWORDS: Currenex,OrderFactory,integration,order management,order type:conditional,order type:stop,order type:trailing-stop-limit,order:create,strategy
CODE:
```
import pandas as pd
from decimal import Decimal
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model.enums import TriggerType
from nautilus_trader.model.enums import TrailingOffsetType
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Price
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import TrailingStopLimitOrder

order: TrailingStopLimitOrder = self.order_factory.trailing_stop_limit(
    instrument_id=InstrumentId.from_str("AUD/USD.CURRENEX"),
    order_side=OrderSide.BUY,
    quantity=Quantity.from_int(1_250_000),
    price=Price.from_str("0.71000"),
    activation_price=Price.from_str("0.72000"),
    trigger_type=TriggerType.BID_ASK,  # <-- optional (default DEFAULT)
    limit_offset=Decimal("0.00050"),
    trailing_offset=Decimal("0.00100"),
    trailing_offset_type=TrailingOffsetType.PRICE,
    time_in_force=TimeInForce.GTC,  # <-- optional (default GTC)
    expire_time=None,  # <-- optional (default None)
    reduce_only=True,  # <-- optional (default False)
    tags=["TRAILING_STOP"],  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Create Trailing-Stop-Market Order in Nautilus Trader (Python)
DESCRIPTION: Demonstrates how to instantiate a TrailingStopMarketOrder object using the order_factory. It shows setting parameters like instrument ID, side, quantity, activation price, trigger type, trailing offset, and time in force for a SELL order on Binance Futures.
SOURCE: docs/concepts/orders.md
LANGUAGE: python
KEYWORDS: Binance,OrderFactory,futures,integration,order management,order type:conditional,order type:stop,order type:trailing-stop-market,order:create,strategy
CODE:
```
import pandas as pd
from decimal import Decimal
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model.enums import TriggerType
from nautilus_trader.model.enums import TrailingOffsetType
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Price
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import TrailingStopMarketOrder

order: TrailingStopMarketOrder = self.order_factory.trailing_stop_market(
    instrument_id=InstrumentId.from_str("ETHUSD-PERP.BINANCE"),
    order_side=OrderSide.SELL,
    quantity=Quantity.from_int(10),
    activation_price=Price.from_str("5_000"),
    trigger_type=TriggerType.LAST_PRICE,  # <-- optional (default DEFAULT)
    trailing_offset=Decimal(100),
    trailing_offset_type=TrailingOffsetType.BASIS_POINTS,
    time_in_force=TimeInForce.GTC,  # <-- optional (default GTC)
    expire_time=None,  # <-- optional (default None)
    reduce_only=True,  # <-- optional (default False)
    tags=["TRAILING_STOP-1"],  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Creating a Market-To-Limit Order in Python
DESCRIPTION: Demonstrates how to create a Market-To-Limit order using the `order_factory` in Nautilus Trader. This order type starts as a market order and converts to a limit order if partially filled. It specifies the instrument, side, quantity, and optional parameters like time in force.
SOURCE: docs/concepts/orders.md
LANGUAGE: python
KEYWORDS: OrderFactory,order management,order type:market-to-limit,order:create,strategy
CODE:
```
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import MarketToLimitOrder

order: MarketToLimitOrder = self.order_factory.market_to_limit(
    instrument_id=InstrumentId.from_str("USD/JPY.IDEALPRO"),
    order_side=OrderSide.BUY,
    quantity=Quantity.from_int(200_000),
    time_in_force=TimeInForce.GTC,  # <-- optional (default GTC)
    reduce_only=False,  # <-- optional (default False)
    display_qty=None,  # <-- optional (default None which indicates full display)
    tags=None,  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Creating a Stop-Market Order in Nautilus Trader (Python)
DESCRIPTION: Shows how to create a Stop-Market order using `order_factory.stop_market`. It illustrates setting the instrument, side, quantity, trigger price, and optional parameters like `trigger_type` and `time_in_force` for a SELL order on Binance Spot/Margin.
SOURCE: docs/concepts/orders.md
LANGUAGE: python
KEYWORDS: Binance,OrderFactory,integration,order management,order type:conditional,order type:stop,order type:stop-market,order:create,spot,strategy
CODE:
```
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model.enums import TriggerType
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Price
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import StopMarketOrder

order: StopMarketOrder = self.order_factory.stop_market(
    instrument_id=InstrumentId.from_str("BTCUSDT.BINANCE"),
    order_side=OrderSide.SELL,
    quantity=Quantity.from_int(1),
    trigger_price=Price.from_int(100_000),
    trigger_type=TriggerType.LAST_PRICE,  # <-- optional (default DEFAULT)
    time_in_force=TimeInForce.GTC,  # <-- optional (default GTC)
    expire_time=None,  # <-- optional (default None)
    reduce_only=False,  # <-- optional (default False)
    tags=None,  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Creating a Stop-Limit Order in Nautilus Trader (Python)
DESCRIPTION: Explains how to create a Stop-Limit order using `order_factory.stop_limit`. It includes setting the instrument, side, quantity, limit price, trigger price, and optional parameters like `trigger_type`, `time_in_force`, and `expire_time` for a BUY order on Currenex FX.
SOURCE: docs/concepts/orders.md
LANGUAGE: python
KEYWORDS: Currenex,GTD,OrderFactory,integration,order management,order type:conditional,order type:stop,order type:stop-limit,order:create,strategy
CODE:
```
import pandas as pd
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model.enums import TriggerType
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Price
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import StopLimitOrder

order: StopLimitOrder = self.order_factory.stop_limit(
    instrument_id=InstrumentId.from_str("GBP/USD.CURRENEX"),
    order_side=OrderSide.BUY,
    quantity=Quantity.from_int(50_000),
    price=Price.from_str("1.30000"),
    trigger_price=Price.from_str("1.30010"),
    trigger_type=TriggerType.BID_ASK,  # <-- optional (default DEFAULT)
    time_in_force=TimeInForce.GTD,  # <-- optional (default GTC)
    expire_time=pd.Timestamp("2022-06-06T12:00"),
    post_only=True,  # <-- optional (default False)
    reduce_only=False,  # <-- optional (default False)
    tags=None,  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Creating a Limit-If-Touched Order in Python
DESCRIPTION: Illustrates the creation of a Limit-If-Touched order using the Nautilus Trader API. This conditional order places a limit order at a specified price once a trigger price is met. The example includes setting instrument, side, quantity, limit price, trigger price, and expiry time.
SOURCE: docs/concepts/orders.md
LANGUAGE: python
KEYWORDS: Binance,OrderFactory,futures,integration,order management,order type:conditional,order type:limit-if-touched,order:create,strategy
CODE:
```
import pandas as pd
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model.enums import TriggerType
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Price
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import LimitIfTouchedOrder

order: LimitIfTouchedOrder = self.order_factory.limit_if_touched(
    instrument_id=InstrumentId.from_str("BTCUSDT-PERP.BINANCE"),
    order_side=OrderSide.BUY,
    quantity=Quantity.from_int(5),
    price=Price.from_str("30_100"),
    trigger_price=Price.from_str("30_150"),
    trigger_type=TriggerType.LAST_PRICE,  # <-- optional (default DEFAULT)
    time_in_force=TimeInForce.GTD,  # <-- optional (default GTC)
    expire_time=pd.Timestamp("2022-06-06T12:00"),
    post_only=True,  # <-- optional (default False)
    reduce_only=False,  # <-- optional (default False)
    tags=["TAKE_PROFIT"],  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Creating a Market-If-Touched Order in Python
DESCRIPTION: Shows how to instantiate a Market-If-Touched order in Nautilus Trader. This conditional order triggers a market order when a specified price is reached. The example sets the instrument, side, quantity, trigger price, and optional parameters.
SOURCE: docs/concepts/orders.md
LANGUAGE: python
KEYWORDS: Binance,OrderFactory,futures,integration,order management,order type:conditional,order type:market-if-touched,order:create,strategy
CODE:
```
from nautilus_trader.model.enums import OrderSide
from nautilus_trader.model.enums import TimeInForce
from nautilus_trader.model.enums import TriggerType
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Price
from nautilus_trader.model import Quantity
from nautilus_trader.model.orders import MarketIfTouchedOrder

order: MarketIfTouchedOrder = self.order_factory.market_if_touched(
    instrument_id=InstrumentId.from_str("ETHUSDT-PERP.BINANCE"),
    order_side=OrderSide.SELL,
    quantity=Quantity.from_int(10),
    trigger_price=Price.from_str("10_000.00"),
    trigger_type=TriggerType.LAST_PRICE,  # <-- optional (default DEFAULT)
    time_in_force=TimeInForce.GTC,  # <-- optional (default GTC)
    expire_time=None,  # <-- optional (default None)
    reduce_only=False,  # <-- optional (default False)
    tags=["ENTRY"],  # <-- optional (default None)
)
```
----------------------------------------
TITLE: Checking Emulation Status Directly on Order Object - Python
DESCRIPTION: Shows how to check if an individual order object is currently being emulated by accessing its 'is_emulated' property. If this property is False, the order has been released or was never emulated.
SOURCE: docs/concepts/orders.md
LANGUAGE: Python
KEYWORDS: emulation,is_emulated,order,order type:emulated,status check
CODE:
```
order.is_emulated
```
----------------------------------------
TITLE: Querying Emulated Orders via Cache - Python
DESCRIPTION: Demonstrates how to use the Cache component within a trading strategy to retrieve information about currently emulated orders. These methods allow checking for specific orders, getting a count, or retrieving all emulated orders.
SOURCE: docs/concepts/orders.md
LANGUAGE: Python
KEYWORDS: cache,emulation,order,order type:emulated,query
CODE:
```
self.cache.orders_emulated(...)
```

LANGUAGE: Python
CODE:
```
self.cache.is_order_emulated(...)
```

LANGUAGE: Python
CODE:
```
self.cache.orders_emulated_count(...)
```