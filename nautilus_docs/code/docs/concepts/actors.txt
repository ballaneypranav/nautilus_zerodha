TITLE: Handling Historical and Real-Time Data in Nautilus Trader Actor (Python)
DESCRIPTION: This Python code defines a custom Actor, `MyActor`, that inherits from `nautilus_trader.common.actor.Actor`. It uses a configuration class `MyActorConfig` to specify the instrument and bar type. The `on_start` method initiates both a historical bar request using `request_bars` and a real-time bar subscription using `subscribe_bars`. Historical data is processed by the `on_historical_data` method, while real-time updates are handled by the `on_bar` method, demonstrating the separation of logic based on data source.
SOURCE: docs/concepts/actors.md
LANGUAGE: python
KEYWORDS: actor,configuration,data handling,data subscription,data type:historical,data type:live,handler,handler:on_bar,handler:on_historical_data
CODE:
```
from nautilus_trader.common.actor import Actor
from nautilus_trader.config import ActorConfig
from nautilus_trader.core.data import Data
from nautilus_trader.model import Bar, BarType
from nautilus_trader.model import ClientId, InstrumentId


class MyActorConfig(ActorConfig):
    instrument_id: InstrumentId  # example value: "AAPL.XNAS"
    bar_type: BarType            # example value: "AAPL.XNAS-1-MINUTE-LAST-EXTERNAL"


class MyActor(Actor):
    def __init__(self, config: MyActorConfig) -> None:
        super().__init__(config)
        self.bar_type = config.bar_type

    def on_start(self) -> None:
        # Request historical data - will be processed by on_historical_data() handler
        self.request_bars(
            bar_type=self.bar_type,
            # Many optional parameters
            start=None,                # datetime, optional
            end=None,                  # datetime, optional
            callback=None,             # called with the request ID when completed
            update_catalog_mode=None,  # UpdateCatalogMode | None, default None
            params=None,               # dict[str, Any], optional
        )

        # Subscribe to real-time data - will be processed by on_bar() handler
        self.subscribe_bars(
            bar_type=self.bar_type,
            # Many optional parameters
            client_id=None,       # ClientId, optional
            await_partial=False,  # bool, default False
            params=None,          # dict[str, Any], optional
        )

    def on_historical_data(self, data: Data) -> None:
        # Handle historical data (from requests)
        if isinstance(data, Bar):
            self.log.info(f"Received historical bar: {data}")

    def on_bar(self, bar: Bar) -> None:
        # Handle real-time bar updates (from subscriptions)
        self.log.info(f"Received real-time bar: {bar}")
```
----------------------------------------
TITLE: Defining a Basic Nautilus Trader Actor with Configuration
DESCRIPTION: This snippet demonstrates how to define a custom Actor in Nautilus Trader, including creating a configuration class inheriting from ActorConfig and implementing the Actor's initialization, start, and data handling methods. It shows how to access configuration and subscribe to real-time bar data.
SOURCE: docs/concepts/actors.md
LANGUAGE: python
KEYWORDS: ActorConfig,actor,configuration,customization,data subscription,handler:on_bar,handler:on_start
CODE:
```
from nautilus_trader.config import ActorConfig
from nautilus_trader.model import InstrumentId
from nautilus_trader.model import Bar, BarType
from nautilus_trader.common.actor import Actor


class MyActorConfig(ActorConfig):
    instrument_id: InstrumentId   # example value: "ETHUSDT-PERP.BINANCE"
    bar_type: BarType             # example value: "ETHUSDT-PERP.BINANCE-15-MINUTE[LAST]-INTERNAL"
    lookback_period: int = 10


class MyActor(Actor):
    def __init__(self, config: MyActorConfig) -> None:
        super().__init__(config)

        # Custom state variables
        self.count_of_processed_bars: int = 0

    def on_start(self) -> None:
        # Subscribe to all incoming bars
        self.subscribe_bars(self.config.bar_type)   # You can access configuration directly via `self.config`

    def on_bar(self, bar: Bar):
        self.count_of_processed_bars += 1
```