TITLE: Handling Received Custom Data in on_data (Python)
DESCRIPTION: Illustrates how to handle received data within the flexible `on_data` method by checking the type of the incoming data object using `isinstance` before processing.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: data handling,data type:custom,handler,handler:on_data
CODE:
```
def on_data(self, data: Data) -> None:
    # First check the type of data
    if isinstance(data, MyDataPoint):
        # Do something with the data
```
----------------------------------------
TITLE: Handling Historical and Real-time Bar Data in Nautilus Trader Python
DESCRIPTION: Shows the required handler methods (`on_historical_data` and `on_bar`) in a Nautilus Trader strategy for processing historical bar data fetched by `request_bars` and real-time bar data received via `subscribe_bars`, respectively.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: bar,data handling,data type:historical,data type:live,handler,handler:on_bar,handler:on_historical_data,strategy
CODE:
```
def on_historical_data(self, data):
    # Processes batches of historical bars from request_bars()
    # Note: indicators registered with register_indicator_for_bars
    # are updated automatically with historical data
    pass

def on_bar(self, bar):
    # Processes individual bars in real-time from subscribe_bars()
    # Indicators registered with this bar type will update automatically and they will be updated before this handler is called
    pass
```
----------------------------------------
TITLE: Initializing Data Feed with Request and Subscribe in Nautilus Trader Python
DESCRIPTION: Demonstrates how to use `request_bars` to fetch historical data for initialization and `subscribe_bars` to receive real-time updates for a specific bar type within the `on_start` method of a Nautilus Trader strategy. It also shows registering an indicator.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: data handling,data subscription,data type:historical,data type:live,handler:on_start,indicator,strategy
CODE:
```
def on_start(self) -> None:
    # Define bar type
    bar_type = BarType.from_str("6EH4.XCME-5-MINUTE-LAST-INTERNAL")

    # Request historical data to initialize indicators
    # These bars will be delivered to the on_historical_data(...) handler in strategy
    self.request_bars(bar_type)

    # Subscribe to real-time updates
    # New bars will be delivered to the on_bar(...) handler in strategy
    self.subscribe_bars(bar_type)

    # Register indicators to receive bar updates (they will be automatically updated)
    self.register_indicator_for_bars(bar_type, self.my_indicator)
```
----------------------------------------
TITLE: Aggregating Bars to Bars (Python)
DESCRIPTION: Provides an example of defining a `BarType` that aggregates from existing `Bar` objects, using the `@` syntax to specify the source bar type. It shows how to create 5-minute bars from 1-minute bars and then request historical data and subscribe to live data for the resulting bar type.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BarType,bar,composite bar,data handling,data subscription,data:aggregation
CODE:
```
def on_start(self) -> None:
    # Create 5-minute bars from 1-minute bars (Bar objects)
    # Format: target_bar_type@source_bar_type
    # Note: price type (LAST) is only needed on the left target side, not on the source side
    bar_type = BarType.from_str("6EH4.XCME-5-MINUTE-LAST-INTERNAL@1-MINUTE-EXTERNAL")

    # Request historical data (processed in on_historical_data(...) handler)
    self.request_bars(bar_type)

    # Subscribe to live updates (processed in on_bar(...) handler)
    self.subscribe_bars(bar_type)
```
----------------------------------------
TITLE: Correct Order for Registering Indicators and Requesting Data in Nautilus Trader Python
DESCRIPTION: Highlights the importance of registering indicators *before* requesting historical data using `request_bars` to ensure the indicators are properly updated with the historical data. Shows both the correct and incorrect order.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: data subscription,data type:historical,indicator,initialization,strategy
CODE:
```
# Correct order
self.register_indicator_for_bars(bar_type, self.ema)
self.request_bars(bar_type)
```

LANGUAGE: python
CODE:
```
# Incorrect order
self.request_bars(bar_type)  # Indicator won't receive historical data
self.register_indicator_for_bars(bar_type, self.ema)
```
----------------------------------------
TITLE: Requesting Historical Bars with Aggregation Options in Nautilus Trader Python
DESCRIPTION: Provides examples of using the `request_bars` method to fetch historical bar data, showing how to request raw bars aggregated from ticks and how to request bars aggregated from other historical bars using the `@` syntax.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BarType,bar,data handling,data subscription,data type:historical,data:aggregation
CODE:
```
# Request raw 1-minute bars (aggregated from TradeTick objects as indicated by LAST price type)
self.request_bars(BarType.from_str("6EH4.XCME-1-MINUTE-LAST-EXTERNAL"))

# Request 5-minute bars aggregated from 1-minute bars
self.request_bars(BarType.from_str("6EH4.XCME-5-MINUTE-LAST-INTERNAL@1-MINUTE-EXTERNAL"))
```
----------------------------------------
TITLE: Aggregating Quote Ticks to Bars (Python)
DESCRIPTION: Demonstrates how to create different `BarType` instances from `QuoteTick` objects using `ASK`, `BID`, and `MID` price types. It shows how to define these bar types and then request historical data and subscribe to live data for one of them.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BarType,QuoteTick,bar,data handling,data subscription,data type:tick,data:aggregation
CODE:
```
def on_start(self) -> None:
    # Create 1-minute bars from ASK prices (in QuoteTick objects)
    bar_type_ask = BarType.from_str("6EH4.XCME-1-MINUTE-ASK-INTERNAL")

    # Create 1-minute bars from BID prices (in QuoteTick objects)
    bar_type_bid = BarType.from_str("6EH4.XCME-1-MINUTE-BID-INTERNAL")

    # Create 1-minute bars from MID prices (middle between ASK and BID prices in QuoteTick objects)
    bar_type_mid = BarType.from_str("6EH4.XCME-1-MINUTE-MID-INTERNAL")

    # Request historical data and subscribe to live data
    self.request_bars(bar_type_ask)    # Historical bars processed in on_historical_data
    self.subscribe_bars(bar_type_ask)  # Live bars processed in on_bar
```
----------------------------------------
TITLE: Publish and Subscribe Custom Data (GreeksData) - Python
DESCRIPTION: Registers the `GreeksData` class for serialization and provides example methods for publishing instances of this data type to the message bus, subscribing to it, and handling incoming data in an `on_data` callback.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: GreeksData,data handling,data type:custom,handler:on_data,publish-subscribe,serialization
CODE:
```
register_serializable_type(GreeksData, GreeksData.to_dict, GreeksData.from_dict)

def publish_greeks(self, greeks_data: GreeksData):
    self.publish_data(DataType(GreeksData), greeks_data)

def subscribe_to_greeks(self):
    self.subscribe_data(DataType(GreeksData))

def on_data(self, data):
    if isinstance(GreeksData):
        print("Data", data)

```
----------------------------------------
TITLE: Aggregating Trade Ticks to Bars (Python)
DESCRIPTION: Example of defining a `BarType` that aggregates directly from `TradeTick` objects (indicated by `price_type=LAST`). It then shows how to request historical data and subscribe to live data for this bar type within an `on_start` method.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BarType,TradeTick,bar,data handling,data subscription,data type:tick,data:aggregation
CODE:
```
def on_start(self) -> None:
    # Define a bar type for aggregating from TradeTick objects
    # Uses price_type=LAST which indicates TradeTick data as source
    bar_type = BarType.from_str("6EH4.XCME-50-VOLUME-LAST-INTERNAL")

    # Request historical data (will receive bars in on_historical_data handler)
    self.request_bars(bar_type)

    # Subscribe to live data (will receive bars in on_bar handler)
    self.subscribe_bars(bar_type)
```
----------------------------------------
TITLE: Defining Composite BarType (Python)
DESCRIPTION: Shows how to define a composite `BarType` that aggregates from existing bars using the format `{instrument_id}-{step}-{aggregation}-{price_type}-INTERNAL@{step}-{aggregation}-{INTERNAL | EXTERNAL}`. This example creates a 5-minute bar type from 1-minute bars, where the 5-minute bars are aggregated internally by Nautilus, and the source 1-minute bars were aggregated externally.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BarType,bar,composite bar,data handling,data:aggregation
CODE:
```
bar_type = BarType.from_str("AAPL.XNAS-5-MINUTE-LAST-INTERNAL@1-MINUTE-EXTERNAL")
```
----------------------------------------
TITLE: Subscribing to Custom Data in Nautilus Trader (Python)
DESCRIPTION: Shows how to subscribe to a specific custom data type using the `subscribe_data` method within an actor or strategy, including optional metadata and a client identifier for routing.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: ClientId,DataType,actor,data handling,data subscription,data type:custom,strategy
CODE:
```
self.subscribe_data(
    data_type=DataType(MyDataPoint,
    metadata={"some_optional_category": 1}),
    client_id=ClientId("MY_ADAPTER"),
)
```
----------------------------------------
TITLE: Configuring Custom Data for Backtesting (Python)
DESCRIPTION: Explains how to configure a custom data type for use in backtesting simulations by creating a `BacktestDataConfig` object, specifying the data class and optional metadata.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BacktestDataConfig,backtesting,configuration,data catalog,data type:custom
CODE:
```
from nautilus_trader.config import BacktestDataConfig

data_config = BacktestDataConfig(
    catalog_path=str(catalog.path),
    data_cls=MyDataPoint,
    metadata={"some_optional_category": 1},
)
```
----------------------------------------
TITLE: Publishing Custom Data in Nautilus Trader (Python)
DESCRIPTION: Demonstrates how to publish an instance of a custom data type using the `publish_data` method within an actor or strategy, including optional metadata for granular topic information.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: DataType,actor,data handling,data type:custom,publish-subscribe,strategy
CODE:
```
self.publish_data(
    DataType(MyDataPoint, metadata={"some_optional_category": 1}),
    MyDataPoint(...),
)
```
----------------------------------------
TITLE: Advanced Bar Aggregation Chains (Python)
DESCRIPTION: Illustrates how to create a chain of bar aggregations. It shows defining a primary bar type from ticks, then an intermediate bar type from the primary, and finally a higher-level bar type from the intermediate, demonstrating the use of the `@` syntax for multi-stage aggregation.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BarType,bar,chaining,composite bar,data handling,data:aggregation
CODE:
```
# First create 1-minute bars from TradeTick objects (LAST indicates TradeTick source)
primary_bar_type = BarType.from_str("6EH4.XCME-1-MINUTE-LAST-INTERNAL")

# Then create 5-minute bars from 1-minute bars
# Note the @1-MINUTE-INTERNAL part identifying the source bars
intermediate_bar_type = BarType.from_str("6EH4.XCME-5-MINUTE-LAST-INTERNAL@1-MINUTE-INTERNAL")

# Then create hourly bars from 5-minute bars
# Note the @5-MINUTE-INTERNAL part identifying the source bars
hourly_bar_type = BarType.from_str("6EH4.XCME-1-HOUR-LAST-INTERNAL@5-MINUTE-INTERNAL")
```
----------------------------------------
TITLE: Initializing ParquetDataCatalog Python
DESCRIPTION: Demonstrates how to create an instance of `ParquetDataCatalog` using a specified file path. It requires the `pathlib` library and the `ParquetDataCatalog` class from `nautilus_trader.persistence.catalog`. The path is constructed using `Path.cwd()` and a subdirectory name.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: ParquetDataCatalog,data catalog,data:persistence,initialization
CODE:
```
from pathlib import Path
from nautilus_trader.persistence.catalog import ParquetDataCatalog


CATALOG_PATH = Path.cwd() / "catalog"

# Create a new catalog instance
catalog = ParquetDataCatalog(CATALOG_PATH)
```
----------------------------------------
TITLE: Writing Data to ParquetDataCatalog Python
DESCRIPTION: Shows how to write a collection of data objects (e.g., `OrderBookDelta`) to the initialized data catalog using the `write_data` method. It assumes `catalog` is an instance of `ParquetDataCatalog` and `deltas` is a list or collection of data objects inheriting from `Data`.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: Data,ParquetDataCatalog,data catalog,data:persistence
CODE:
```
catalog.write_data(deltas)
```
----------------------------------------
TITLE: Defining Standard BarType (Python)
DESCRIPTION: Demonstrates how to define a standard `BarType` using the string convention `{instrument_id}-{step}-{aggregation}-{price_type}-{INTERNAL | EXTERNAL}`. This example creates a 5-minute bar type for AAPL trades aggregated internally from `TradeTick` data.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BarType,bar,data handling,standard bar
CODE:
```
bar_type = BarType.from_str("AAPL.XNAS-5-MINUTE-LAST-INTERNAL")
```
----------------------------------------
TITLE: Define Custom GreeksData Class - Python
DESCRIPTION: Defines a custom data class `GreeksData` inheriting from `nautilus_trader.core.Data`. It includes methods for initialization, representation, property access, serialization (to dict, bytes, Arrow RecordBatch), and schema definition for persistence.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: GreeksData,class definition,data type:custom,data:persistence,schema,serialization
CODE:
```
import msgspec
from nautilus_trader.core import Data
from nautilus_trader.core.datetime import unix_nanos_to_iso8601
from nautilus_trader.model import DataType
from nautilus_trader.serialization.base import register_serializable_type
from nautilus_trader.serialization.arrow.serializer import register_arrow
import pyarrow as pa

from nautilus_trader.model import InstrumentId
from nautilus_trader.core.datetime import dt_to_unix_nanos, unix_nanos_to_dt, format_iso8601


class GreeksData(Data):
    def __init__(
        self, instrument_id: InstrumentId = InstrumentId.from_str("ES.GLBX"),
        ts_event: int = 0,
        ts_init: int = 0,
        delta: float = 0.0,
    ) -> None:
        self.instrument_id = instrument_id
        self._ts_event = ts_event
        self._ts_init = ts_init
        self.delta = delta

    def __repr__(self):
        return (f"GreeksData(ts_init={unix_nanos_to_iso8601(self._ts_init)}, instrument_id={self.instrument_id}, delta={self.delta:.2f})")

    @property
    def ts_event(self):
        return self._ts_event

    @property
    def ts_init(self):
        return self._ts_init

    def to_dict(self):
        return {
            "instrument_id": self.instrument_id.value,
            "ts_event": self._ts_event,
            "ts_init": self._ts_init,
            "delta": self.delta,
        }

    @classmethod
    def from_dict(cls, data: dict):
        return GreeksData(InstrumentId.from_str(data["instrument_id"]), data["ts_event"], data["ts_init"], data["delta"])

    def to_bytes(self):
        return msgspec.msgpack.encode(self.to_dict())

    @classmethod
    def from_bytes(cls, data: bytes):
        return cls.from_dict(msgspec.msgpack.decode(data))

    def to_catalog(self):
        return pa.RecordBatch.from_pylist([self.to_dict()], schema=GreeksData.schema())

    @classmethod
    def from_catalog(cls, table: pa.Table):
        return [GreeksData.from_dict(d) for d in table.to_pylist()]

    @classmethod
    def schema(cls):
        return pa.schema(
            {
                "instrument_id": pa.string(),
                "ts_event": pa.int64(),
                "ts_init": pa.int64(),
                "delta": pa.float64(),
            }
        )

```
----------------------------------------
TITLE: Write Custom Data (GreeksData) to Parquet Catalog - Python
DESCRIPTION: Registers the `GreeksData` class for Arrow serialization using its defined schema and methods. Demonstrates initializing a `ParquetDataCatalog` and writing a list containing an instance of `GreeksData` to it.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: Arrow,GreeksData,data catalog,data type:custom,data:persistence,serialization
CODE:
```
register_arrow(GreeksData, GreeksData.schema(), GreeksData.to_catalog, GreeksData.from_catalog)

from nautilus_trader.persistence.catalog import ParquetDataCatalog
catalog = ParquetDataCatalog('.')

catalog.write_data([GreeksData()])

```
----------------------------------------
TITLE: Requesting Explicitly Aggregated Historical Bars in Nautilus Trader Python
DESCRIPTION: Illustrates the use of the specialized `request_aggregated_bars` method for fetching historical bars that require explicit aggregation, demonstrating requests for bars aggregated from trade ticks and bars aggregated from other bars.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: bar,data handling,data subscription,data type:historical,data:aggregation,request_aggregated_bars
CODE:
```
# Request bars that are aggregated from historical trade ticks
self.request_aggregated_bars(BarType.from_str("6EH4.XCME-100-VOLUME-LAST-INTERNAL"))

# Request bars that are aggregated from other bars
self.request_aggregated_bars(BarType.from_str("6EH4.XCME-5-MINUTE-LAST-INTERNAL@1-MINUTE-EXTERNAL"))
```
----------------------------------------
TITLE: Reading OrderBookDeltas from ParquetDataCatalog Python
DESCRIPTION: Illustrates how to read `OrderBookDelta` data from the catalog within a specified time range and for specific instrument IDs. It uses `dt_to_unix_nanos` to convert timestamps to the required format and requires `pandas` and `pytz` for timestamp handling. The method `order_book_deltas` is called on the catalog instance.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: OrderBookDelta,data catalog,data type:order-book-delta,query,time range
CODE:
```
from nautilus_trader.core.datetime import dt_to_unix_nanos
import pandas as pd
import pytz


start = dt_to_unix_nanos(pd.Timestamp("2020-01-03", tz=pytz.utc))
end =  dt_to_unix_nanos(pd.Timestamp("2020-01-04", tz=pytz.utc))

deltas = catalog.order_book_deltas(instrument_ids=[instrument.id.value], start=start, end=end)
```
----------------------------------------
TITLE: Defining a Custom Data Class in Python
DESCRIPTION: Shows how to create a custom data type by inheriting from `nautilus_trader.core.Data` and implementing the required `ts_event` and `ts_init` properties, along with arbitrary user-defined fields.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: Data,customization,data type:custom,ts_event,ts_init
CODE:
```
from nautilus_trader.core import Data


class MyDataPoint(Data):
    """
    This is an example of a user-defined data class, inheriting from the base class `Data`.

    The fields `label`, `x`, `y`, and `z` in this class are examples of arbitrary user data.
    """

    def __init__(
        self,
        label: str,
        x: int,
        y: int,
        z: int,
        ts_event: int,
        ts_init: int,
    ) -> None:
        self.label = label
        self.x = x
        self.y = y
        self.z = z
        self._ts_event = ts_event
        self._ts_init = ts_init

    @property
    def ts_event(self) -> int:
        """
        UNIX timestamp (nanoseconds) when the data event occurred.

        Returns
        -------
        int

        """
        return self._ts_event

    @property
    def ts_init(self) -> int:
        """
        UNIX timestamp (nanoseconds) when the object was initialized.

        Returns
        -------
        int

        """
        return self._ts_init
```
----------------------------------------
TITLE: Cache and Retrieve Custom Data (GreeksData) - Python
DESCRIPTION: Provides helper functions to generate a cache key for `GreeksData` based on instrument ID and demonstrates methods for adding serialized `GreeksData` to the cache and retrieving/deserializing it.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: GreeksData,cache,data handling,data type:custom,data:persistence,key-value store,serialization
CODE:
```
def greeks_key(instrument_id: InstrumentId):
    return f"{instrument_id}_GREEKS"

def cache_greeks(self, greeks_data: GreeksData):
    self.cache.add(greeks_key(greeks_data.instrument_id), greeks_data.to_bytes())

def greeks_from_cache(self, instrument_id: InstrumentId):
    return GreeksData.from_bytes(self.cache.get(greeks_key(instrument_id)))

```
----------------------------------------
TITLE: Loading and Wrangling Binance Order Book Data (Python)
DESCRIPTION: Demonstrates the process of loading raw Binance order book data from a CSV file using `BinanceOrderBookDeltaDataLoader`, which returns a pandas DataFrame. This DataFrame is then processed by `OrderBookDeltaDataWrangler` to produce a list of Nautilus `OrderBookDelta` objects. Requires `BinanceOrderBookDeltaDataLoader`, `OrderBookDeltaDataWrangler`, and `TestInstrumentProvider`.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: Binance,BinanceOrderBookDeltaDataLoader,OrderBookDeltaDataWrangler,data handling,data type:order-book-delta,data:loading,data:wrangling,integration
CODE:
```
from nautilus_trader import TEST_DATA_DIR
from nautilus_trader.adapters.binance.loaders import BinanceOrderBookDeltaDataLoader
from nautilus_trader.persistence.wranglers import OrderBookDeltaDataWrangler
from nautilus_trader.test_kit.providers import TestInstrumentProvider


# Load raw data
data_path = TEST_DATA_DIR / "binance" / "btcusdt-depth-snap.csv"
df = BinanceOrderBookDeltaDataLoader.load(data_path)

# Set up a wrangler
instrument = TestInstrumentProvider.btcusdt_binance()
wrangler = OrderBookDeltaDataWrangler(instrument)

# Process to a list `OrderBookDelta` Nautilus objects
deltas = wrangler.process(df)
```
----------------------------------------
TITLE: Publishing and Subscribing to Signal Data (Python)
DESCRIPTION: Provides examples of publishing and subscribing to simple signal data using dedicated methods (`publish_signal`, `subscribe_signal`) and shows how to handle received signals in the `on_signal` method.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: data handling,handler:on_signal,publish-subscribe,signal
CODE:
```
self.publish_signal("signal_name", value, ts_event)
self.subscribe_signal("signal_name")

def on_signal(self, signal):
    print("Signal", data)
```
----------------------------------------
TITLE: Create Custom Data Class with Decorator (@customdataclass) - Python
DESCRIPTION: Illustrates the use of the `@customdataclass` decorator to simplify the creation of custom data classes like `GreeksTestData`. The decorator automatically provides default implementations for serialization, persistence, and other required methods, allowing for a more concise definition.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: Data,customdataclass,customization,data type:custom,decorator,serialization
CODE:
```
from nautilus_trader.model.custom import customdataclass


@customdataclass
class GreeksTestData(Data):
    instrument_id: InstrumentId = InstrumentId.from_str("ES.GLBX")
    delta: float = 0.0


GreeksTestData(
    instrument_id=InstrumentId.from_str("CL.GLBX"),
    delta=1000.0,
    ts_event=1,
    ts_init=2,
)

```
----------------------------------------
TITLE: Configuring BacktestDataConfig for Streaming Python
DESCRIPTION: Demonstrates how to create a `BacktestDataConfig` object to specify data sources and parameters for streaming data during backtesting. It requires the `BacktestDataConfig` class and the data class (e.g., `OrderBookDelta`) and instrument ID. The configuration includes the catalog path, data type, instrument, and time range.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: BacktestDataConfig,OrderBookDelta,backtesting,configuration,data handling,data streaming,data type:order-book-delta
CODE:
```
from nautilus_trader.config import BacktestDataConfig
from nautilus_trader.model import OrderBookDelta


data_config = BacktestDataConfig(
    catalog_path=str(catalog.path),
    data_cls=OrderBookDelta,
    instrument_id=instrument.id,
    start_time=start,
    end_time=end,
)
```
----------------------------------------
TITLE: Define Custom Data Type Stub in Python
DESCRIPTION: This snippet shows the structure of a .pyi stub file for a custom data type named GreeksData. It defines the class attributes with type hints and provides a constructor signature that helps IDEs understand the class's initialization parameters.
SOURCE: docs/concepts/data.md
LANGUAGE: python
KEYWORDS: IDE support,customization,data type:custom,stubs,type hints
CODE:
```
from nautilus_trader.core import Data
from nautilus_trader.model import InstrumentId


class GreeksData(Data):
    instrument_id: InstrumentId
    delta: float

    def __init__(
        self,
        ts_event: int = 0,
        ts_init: int = 0,
        instrument_id: InstrumentId = InstrumentId.from_str("ES.GLBX"),
        delta: float = 0.0,
  ) -> GreeksData: ...
```