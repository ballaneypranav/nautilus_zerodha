TITLE: Binance API Key Environment Variables
DESCRIPTION: This section outlines the environment variables that can be used to supply API credentials to Binance clients. It lists specific variables for live and testnet environments across Spot/Margin and Futures accounts, providing an alternative to passing keys directly in configuration objects.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: API credentials,Binance,configuration,configuration:environment-variables,documentation:API-reference,futures,integration,security,spot
CODE:
```
For Binance Spot/Margin live clients:
- BINANCE_API_KEY
- BINANCE_API_SECRET

For Binance Spot/Margin testnet clients:
- BINANCE_TESTNET_API_KEY
- BINANCE_TESTNET_API_SECRET

For Binance Futures live clients:
- BINANCE_FUTURES_API_KEY
- BINANCE_FUTURES_API_SECRET

For Binance Futures testnet clients:
- BINANCE_FUTURES_TESTNET_API_KEY
- BINANCE_FUTURES_TESTNET_API_SECRET
```
----------------------------------------
TITLE: Configure TradingNode for Binance Data and Execution Clients
DESCRIPTION: This snippet demonstrates the most common use case: configuring a live TradingNode to include Binance data and execution clients. It shows how to add a 'BINANCE' section to your TradingNodeConfig for both data and execution clients, specifying API keys, secrets, account type, and optional base URL overrides.
SOURCE: docs/integrations/binance.md
LANGUAGE: python
KEYWORDS: Binance,TradingNodeConfig,API credentials,client:data,client:execution,configuration,integration,live trading,spot
CODE:
```
from nautilus_trader.adapters.binance import BINANCE
from nautilus_trader.live.node import TradingNode

config = TradingNodeConfig(
    ...,  # Omitted
    data_clients={
        BINANCE: {
            "api_key": "YOUR_BINANCE_API_KEY",
            "api_secret": "YOUR_BINANCE_API_SECRET",
            "account_type": "spot",  # {spot, margin, usdt_future, coin_future}
            "base_url_http": None,  # Override with custom endpoint
            "base_url_ws": None,  # Override with custom endpoint
            "us": False,  # If client is for Binance US
        },
    },
    exec_clients={
        BINANCE: {
            "api_key": "YOUR_BINANCE_API_KEY",
            "api_secret": "YOUR_BINANCE_API_SECRET",
            "account_type": "spot",  # {spot, margin, usdt_future, coin_future}
            "base_url_http": None,  # Override with custom endpoint
            "base_url_ws": None,  # Override with custom endpoint
            "us": False,  # If client is for Binance US
        },
    },
)
```
----------------------------------------
TITLE: Configure TradingNode for Binance Testnet Clients
DESCRIPTION: This snippet demonstrates how to configure Binance clients within the TradingNode to connect to the Binance testnet. By setting the 'testnet' option to 'True' in the data and execution client configurations, users can test their strategies without using live funds.
SOURCE: docs/integrations/binance.md
LANGUAGE: python
KEYWORDS: Binance,TradingNodeConfig,API credentials,configuration,integration,live trading,testnet
CODE:
```
from nautilus_trader.adapters.binance import BINANCE

config = TradingNodeConfig(
    ...,  # Omitted
    data_clients={
        BINANCE: {
            "api_key": "YOUR_BINANCE_TESTNET_API_KEY",
            "api_secret": "YOUR_BINANCE_TESTNET_API_SECRET",
            "account_type": "spot",  # {spot, margin, usdt_future}
            "testnet": True,  # If client uses the testnet
        },
    },
    exec_clients={
        BINANCE: {
            "api_key": "YOUR_BINANCE_TESTNET_API_KEY",
            "api_secret": "YOUR_BINANCE_TESTNET_API_SECRET",
            "account_type": "spot",  # {spot, margin, usdt_future}
            "testnet": True,  # If client uses the testnet
        },
    },
)
```
----------------------------------------
TITLE: Install NautilusTrader with Binance Support
DESCRIPTION: Instructions for installing the NautilusTrader library with Binance integration, including standard pip installation and building from source with all extras.
SOURCE: docs/integrations/binance.md
LANGUAGE: bash
KEYWORDS: Binance,dev:extras,dev:installation,dev:package-management,development,integration
CODE:
```
pip install --upgrade "nautilus_trader[binance]"
```

LANGUAGE: bash
CODE:
```
uv sync --all-extras
```
----------------------------------------
TITLE: Instantiate and Register Binance Client Factories with TradingNode
DESCRIPTION: This code snippet illustrates how to create a TradingNode instance using the previously defined configuration. It then shows the process of registering the Binance live data and execution client factories with the node, which is a crucial step before building and starting the trading node.
SOURCE: docs/integrations/binance.md
LANGUAGE: python
KEYWORDS: Binance,TradingNode,client:factory,dev:build,development,integration,live trading
CODE:
```
from nautilus_trader.adapters.binance import BINANCE
from nautilus_trader.adapters.binance import BinanceLiveDataClientFactory
from nautilus_trader.adapters.binance import BinanceLiveExecClientFactory
from nautilus_trader.live.node import TradingNode

# Instantiate the live trading node with a configuration
node = TradingNode(config=config)

# Register the client factories with the node
node.add_data_client_factory(BINANCE, BinanceLiveDataClientFactory)
node.add_exec_client_factory(BINANCE, BinanceLiveExecClientFactory)

# Finally build the node
node.build()
```
----------------------------------------
TITLE: Handle Binance Futures Mark Price Updates in on_data Method
DESCRIPTION: Illustrates how to process received BinanceFuturesMarkPriceUpdate objects within the generic on_data method of an actor or strategy. It shows the necessary type checking to differentiate custom data types from other incoming data.
SOURCE: docs/integrations/binance.md
LANGUAGE: python
KEYWORDS: Binance,BinanceFuturesMarkPriceUpdate,data type:custom,futures,handler:on_data,integration,mark price
CODE:
```
from nautilus_trader.core import Data

def on_data(self, data: Data):
    # First check the type of data
    if isinstance(data, BinanceFuturesMarkPriceUpdate):
        # Do something with the data
```
----------------------------------------
TITLE: Binance Supported Order Types Across Account Types
DESCRIPTION: Details the order types supported by the Binance adapter across different account types: Spot, Margin, USDT Futures, and Coin Futures, with specific notes on limitations.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,documentation:API-reference,futures,integration,margin,order types,spot,supported features
CODE:
```
MARKET:
  Spot: Supported
  Margin: Supported
  USDT Futures: Supported
  Coin Futures: Supported
LIMIT:
  Spot: Supported
  Margin: Supported
  USDT Futures: Supported
  Coin Futures: Supported
STOP_MARKET:
  Spot: Not Supported
  Margin: Supported
  USDT Futures: Supported
  Coin Futures: Supported
  Notes: Not supported for Spot.
STOP_LIMIT:
  Spot: Supported
  Margin: Supported
  USDT Futures: Supported
  Coin Futures: Supported
MARKET_IF_TOUCHED:
  Spot: Not Supported
  Margin: Not Supported
  USDT Futures: Supported
  Coin Futures: Supported
  Notes: Futures only.
LIMIT_IF_TOUCHED:
  Spot: Supported
  Margin: Supported
  USDT Futures: Supported
  Coin Futures: Supported
TRAILING_STOP_MARKET:
  Spot: Not Supported
  Margin: Not Supported
  USDT Futures: Supported
  Coin Futures: Supported
  Notes: Futures only.
```
----------------------------------------
TITLE: Advanced Order Features Overview
DESCRIPTION: Summarizes advanced order functionalities including Order Modification, Bracket/OCO Orders, and Iceberg Orders, detailing their support across different trading venues and primary use cases.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,documentation:API-reference,feature:advanced-orders,integration,order modification
CODE:
```
| Feature            | Spot | Margin | USDT Futures | Coin Futures | Notes                                        |
|--------------------|------|--------|--------------|--------------|----------------------------------------------|
| Order Modification | ✓    | ✓      | ✓            | ✓            | Price and quantity for `LIMIT` orders only.  |
| Bracket/OCO Orders | ✓    | ✓      | ✓            | ✓            | One-Cancels-Other for stop loss/take profit. |
| Iceberg Orders     | ✓    | ✓      | ✓            | ✓            | Large orders split into visible portions.    |
```
----------------------------------------
TITLE: Execution Client Configuration Options
DESCRIPTION: Lists key configuration options that influence order behavior, such as `use_gtd`, `use_reduce_only`, `use_position_ids`, `treat_expired_as_canceled`, `futures_leverages`, and `futures_margin_types`, along with their default values and descriptions.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,client:execution,configuration,documentation:API-reference,integration,leverage,margin,position_ids,reduce_only
CODE:
```
| Option                      | Default | Description                                                                 |
|-----------------------------|---------|-----------------------------------------------------------------------------|
| `use_gtd`                   | `True`  | If `True`, uses Binance GTD TIF; if `False`, remaps GTD to GTC for local management. |
| `use_reduce_only`           | `True`  | If `True`, sends `reduce_only` instruction to exchange; if `False`, always sends `False`. |
| `use_position_ids`          | `True`  | If `True`, uses Binance Futures hedging position IDs; if `False`, enables virtual positions. |
| `treat_expired_as_canceled` | `False` | If `True`, treats `EXPIRED` execution type as `CANCELED` for consistent handling. |
| `futures_leverages`         | `None`  | Dict to set initial leverage per symbol for Futures accounts.               |
| `futures_margin_types`      | `None`  | Dict to set margin type (isolated/cross) per symbol for Futures accounts.   |
```
----------------------------------------
TITLE: Execution Instructions for Order Placement
DESCRIPTION: Details the supported execution instructions like `post_only` and `reduce_only` across different trading venues (Spot, Margin, USDT Futures, Coin Futures) and their specific notes and limitations.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,documentation:API-reference,execution instructions,integration,post_only,reduce_only
CODE:
```
| Instruction   | Spot | Margin | USDT Futures | Coin Futures | Notes                                 |
|---------------|------|--------|--------------|--------------|---------------------------------------|
| `post_only`   | ✓    | ✓      | ✓            | ✓            | See restrictions below.               |
| `reduce_only` | -    | -      | ✓            | ✓            | Futures only; disabled in Hedge Mode. |
```
----------------------------------------
TITLE: Post-Only Order Type Restrictions
DESCRIPTION: Specifies which order types support the `post_only` instruction, highlighting differences across trading venues and the underlying mechanisms used (e.g., `LIMIT_MAKER`, `GTX` TIF).
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,documentation:API-reference,execution instructions,integration,limit order,post_only,stop limit order
CODE:
```
Only *limit* order types support `post_only`.

| Order Type               | Spot | Margin | USDT Futures | Coin Futures | Notes                                                      |
|--------------------------|------|--------|--------------|--------------|------------------------------------------------------------|
| `LIMIT`                  | ✓    | ✓      | ✓            | ✓            | Uses `LIMIT_MAKER` for Spot/Margin, `GTX` TIF for Futures. |
| `STOP_LIMIT`             | -    | -      | ✓            | ✓            | Not supported for Spot/Margin.                             |
```
----------------------------------------
TITLE: Custom Binance Data Types for API Functionality
DESCRIPTION: Describes custom data types introduced by the Binance integration to provide comprehensive API functionality, including ticker, bar, and futures mark price updates.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,BinanceBar,BinanceFuturesMarkPriceUpdate,BinanceTicker,data type:custom,documentation:API-reference,integration
CODE:
```
BinanceTicker: Represents data returned for Binance 24-hour ticker subscriptions, including comprehensive price and statistical information.
BinanceBar: Represents data for historical requests or real-time subscriptions to Binance bars, with additional volume metrics.
BinanceFuturesMarkPriceUpdate: Represents mark price updates for Binance Futures subscriptions.
```
----------------------------------------
TITLE: Binance Trailing Stop Order Behavior and Parameters
DESCRIPTION: Explains the unique concept of activation price for Binance trailing stop orders, differentiating it from the trigger price. It details how to set the `activation_price` parameter and the conditions under which trailing stops can be activated.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,activation price,behavior,documentation:API-reference,integration,limitations,order type:trailing-stop
CODE:
```
Binance uses the concept of an activation price for trailing stops, as detailed in their [documentation](https://www.binance.com/en/support/faq/what-is-a-trailing-stop-order-360042299292).
This approach is somewhat unconventional. For trailing stop orders to function on Binance, the activation price should be set using the `activation_price` parameter.

Note that the activation price is **not** the same as the trigger/STOP price. Binance will always calculate the trigger price for the order based on the current market price and the callback rate provided by `trailing_offset`.
The activation price is simply the price at which the order will begin trailing based on the callback rate.

:::warning
For Binance trailing stop orders, you must use `activation_price` instead of `trigger_price`. Using `trigger_price` will result in an order rejection.
:::

When submitting trailing stop orders from your strategy, you have two options:

1. Use the `activation_price` to manually set the activation price.
2. Leave the `activation_price` as `None`, activating the trailing mechanism immediately.

You must also have at least *one* of the following:

- The `activation_price` for the order is set.
- (or) you have subscribed to quotes for the instrument you're submitting the order for (used to infer activation price).
- (or) you have subscribed to trades for the instrument you're submitting the order for (used to infer activation price).
```
----------------------------------------
TITLE: Binance Account Type Enum Options
DESCRIPTION: This API documentation snippet details the available account types for Binance live trading, which are set using the BinanceAccountType enum. It lists and briefly describes each supported account type, including SPOT, MARGIN, ISOLATED_MARGIN, USDT_FUTURE, and COIN_FUTURE.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,account type,documentation:API-reference,enum,futures,integration,margin,spot
CODE:
```
BinanceAccountType Enum:
- SPOT
- MARGIN (Margin shared between open positions)
- ISOLATED_MARGIN (Margin assigned to a single position)
- USDT_FUTURE (USDT or BUSD stablecoins as collateral)
- COIN_FUTURE (other cryptocurrency as collateral)
```
----------------------------------------
TITLE: Binance Adapter Core Components Overview
DESCRIPTION: Details the low-level and high-level components of the NautilusTrader Binance adapter, outlining their specific functionalities for market data, execution, and instrument handling.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,HTTP client,InstrumentProvider,WebSocket,adapters,components,documentation:API-reference,integration
CODE:
```
BinanceHttpClient: Low-level HTTP API connectivity.
BinanceWebSocketClient: Low-level WebSocket API connectivity.
BinanceInstrumentProvider: Instrument parsing and loading functionality.
BinanceSpotDataClient/BinanceFuturesDataClient: A market data feed manager.
BinanceSpotExecutionClient/BinanceFuturesExecutionClient: An account management and trade execution gateway.
BinanceLiveDataClientFactory: Factory for Binance data clients (used by the trading node builder).
BinanceLiveExecClientFactory: Factory for Binance execution clients (used by the trading node builder).
```
----------------------------------------
TITLE: Configure Binance Futures Hedge Mode in TradingNode
DESCRIPTION: To enable Binance Futures Hedge mode in Nautilus Trader, the `use_reduce_only` option must be set to `False` within the `BinanceExecClientConfig`. This configuration is part of the `TradingNodeConfig` and allows for opening both long and short positions simultaneously on Binance Futures, provided hedge mode is also enabled on the Binance exchange itself.
SOURCE: docs/integrations/binance.md
LANGUAGE: python
KEYWORDS: Binance,TradingNodeConfig,configuration,feature:hedge-mode,futures,integration,live trading,reduce_only
CODE:
```
from nautilus_trader.adapters.binance import BINANCE

config = TradingNodeConfig(
    ...,  # Omitted
    data_clients={
        BINANCE: BinanceDataClientConfig(
            api_key=None,  # 'BINANCE_API_KEY' env var
            api_secret=None,  # 'BINANCE_API_SECRET' env var
            account_type=BinanceAccountType.USDT_FUTURE,
            base_url_http=None,  # Override with custom endpoint
            base_url_ws=None,  # Override with custom endpoint
        ),
    },
    exec_clients={
        BINANCE: BinanceExecClientConfig(
            api_key=None,  # 'BINANCE_API_KEY' env var
            api_secret=None,  # 'BINANCE_API_SECRET' env var
            account_type=BinanceAccountType.USDT_FUTURE,
            base_url_http=None,  # Override with custom endpoint
            base_url_ws=None,  # Override with custom endpoint
            use_reduce_only=False,  # Must be disabled for Hedge mode
        ),
    }
)
```
----------------------------------------
TITLE: Submit Directional Orders in Binance Futures Hedge Mode
DESCRIPTION: This example demonstrates how to submit market orders in Binance Futures Hedge mode within a Nautilus Trader strategy. To specify the position direction (long or short), a `LONG` or `SHORT` suffix is appended to the `position_id` when submitting the order. This allows the Binance adapter to correctly recognize and manage the directional position.
SOURCE: docs/integrations/binance.md
LANGUAGE: python
KEYWORDS: Binance,directional trading,feature:hedge-mode,futures,integration,live trading,order management,position ID,strategy
CODE:
```
class EMACrossHedgeMode(Strategy):
    ...,  # Omitted
    def buy(self) -> None:
        """
        Users simple buy method (example).
        """
        order: MarketOrder = self.order_factory.market(
            instrument_id=self.instrument_id,
            order_side=OrderSide.BUY,
            quantity=self.instrument.make_qty(self.trade_size),
            # time_in_force=TimeInForce.FOK,
        )

        # LONG suffix is recognized as a long position by Binance adapter.
        position_id = PositionId(f"{self.instrument_id}-LONG")
        self.submit_order(order, position_id)

    def sell(self) -> None:
        """
        Users simple sell method (example).
        """
        order: MarketOrder = self.order_factory.market(
            instrument_id=self.instrument_id,
            order_side=OrderSide.SELL,
            quantity=self.instrument.make_qty(self.trade_size),
            # time_in_force=TimeInForce.FOK,
        )
        # SHORT suffix is recognized as a short position by Binance adapter.
        position_id = PositionId(f"{self.instrument_id}-SHORT")
        self.submit_order(order, position_id)
```
----------------------------------------
TITLE: Configure Binance Instrument Provider Warnings
DESCRIPTION: This configuration example shows how to disable logging of warnings that occur when Binance instruments cannot be fully parsed by Nautilus Trader due to excessively large field values. Setting `log_warnings` to `False` prevents these warnings from cluttering logs, allowing the system to continue operation without the unparseable instruments.
SOURCE: docs/integrations/binance.md
LANGUAGE: python
KEYWORDS: Binance,configuration,instrument provider,integration,live trading,logging,warnings
CODE:
```
from nautilus_trader.config import InstrumentProviderConfig

instrument_provider=InstrumentProviderConfig(
    load_all=True,
    log_warnings=False,
)
```
----------------------------------------
TITLE: Supported Time-in-Force (TIF) Options
DESCRIPTION: Outlines the available Time-in-Force options such as `GTC`, `GTD`, `FOK`, and `IOC`, indicating their availability across various trading venues and any specific conversion behaviors.
SOURCE: docs/integrations/binance.md
LANGUAGE: APIDOC
KEYWORDS: Binance,FOK,GTC,GTD,IOC,TimeInForce,documentation:API-reference,integration
CODE:
```
| Time-in-Force | Spot | Margin | USDT Futures | Coin Futures | Notes                                           |
|---------------|------|--------|--------------|--------------|-------------------------------------------------|
| `GTC`         | ✓    | ✓      | ✓            | ✓            | Good Till Canceled.                             |
| `GTD`         | ✓*   | ✓*     | ✓            | ✓            | *Converted to GTC for Spot/Margin with warning. |
| `FOK`         | ✓    | ✓      | ✓            | ✓            | Fill or Kill.                                   |
| `IOC`         | ✓    | ✓      | ✓            | ✓            | Immediate or Cancel.                            |
```
----------------------------------------
TITLE: Subscribe to Binance Futures Mark Price Updates in Nautilus Trader
DESCRIPTION: Demonstrates how to subscribe to BinanceFuturesMarkPriceUpdate data streams, including funding rate information, from an actor or strategy's on_start method. This subscription uses a specific DataType with metadata for the instrument ID and a ClientId for Binance.
SOURCE: docs/integrations/binance.md
LANGUAGE: python
KEYWORDS: Binance,BinanceFuturesMarkPriceUpdate,data subscription,data type:custom,futures,integration,mark price
CODE:
```
from nautilus_trader.adapters.binance import BinanceFuturesMarkPriceUpdate
from nautilus_trader.model import DataType
from nautilus_trader.model import ClientId

# In your `on_start` method
self.subscribe_data(
    data_type=DataType(BinanceFuturesMarkPriceUpdate, metadata={"instrument_id": self.instrument.id}),
    client_id=ClientId("BINANCE")
)
```