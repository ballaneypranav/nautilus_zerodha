TITLE: Supported NautilusTrader Integrations and Adapters
DESCRIPTION: Lists the currently supported trading venue and data provider integrations in NautilusTrader, detailing their unique identifiers, types, and current development status, along with definitions for IDs, Types, and Statuses.
SOURCE: docs/integrations/index.md
LANGUAGE: APIDOC
KEYWORDS: Binance,Bybit,Databento,Interactive Brokers,dYdX,documentation:API-reference,integration,supported venues
CODE:
```
Integrations:
  - Name: Betfair
    ID: BETFAIR
    Type: Sports Betting Exchange
    Status: stable
  - Name: Binance
    ID: BINANCE
    Type: Crypto Exchange (CEX)
    Status: stable
  - Name: Binance US
    ID: BINANCE
    Type: Crypto Exchange (CEX)
    Status: stable
  - Name: Binance Futures
    ID: BINANCE
    Type: Crypto Exchange (CEX)
    Status: stable
  - Name: Bybit
    ID: BYBIT
    Type: Crypto Exchange (CEX)
    Status: stable
  - Name: Coinbase International
    ID: COINBASE_INTX
    Type: Crypto Exchange (CEX)
    Status: stable
  - Name: Databento
    ID: DATABENTO
    Type: Data Provider
    Status: stable
  - Name: dYdX
    ID: DYDX
    Type: Crypto Exchange (DEX)
    Status: stable
  - Name: Interactive Brokers
    ID: INTERACTIVE_BROKERS
    Type: Brokerage (multi-venue)
    Status: stable
  - Name: OKX
    ID: OKX
    Type: Crypto Exchange (CEX)
    Status: building
  - Name: Polymarket
    ID: POLYMARKET
    Type: Prediction Market (DEX)
    Status: stable
  - Name: Tardis
    ID: TARDIS
    Type: Crypto Data Provider
    Status: stable

Integration_ID_Type_Mapping:
  ID: The default client ID for the integrations adapter clients.
  Type: The type of integration (often the venue type).

Integration_Status_Definitions:
  building: Under construction and likely not in a usable state.
  beta: Completed to a minimally working state and in a 'beta' testing phase.
  stable: Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level (some bugs may still remain).
```
----------------------------------------
TITLE: NautilusTrader Integration API Functionality Goals
DESCRIPTION: Outlines the standard API functionalities that each NautilusTrader integration aims to support, ensuring a unified trading system across various venues. This includes capabilities for market data, order management, and execution state, along with general implementation criteria.
SOURCE: docs/integrations/index.md
LANGUAGE: APIDOC
KEYWORDS: dev:API-design,development,documentation:API-goals,execution state,integration,market data,order management
CODE:
```
NautilusTrader_Integration_API_Goals:
  - Requesting historical market data
  - Streaming live market data
  - Reconciling execution state
  - Submitting standard order types with standard execution instructions
  - Modifying existing orders (if possible on an exchange)
  - Canceling orders

Implementation_Criteria:
  - Low-level client components should match the exchange API as closely as possible.
  - The full range of an exchange's functionality (where applicable to NautilusTrader) should eventually be supported.
  - Exchange specific data types will be added to support the functionality and return types which are reasonably expected by a user.
  - Actions unsupported by an exchange or NautilusTrader will be logged as a warning or error when invoked.
```